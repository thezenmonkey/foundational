<?php
/**
 * Class: FoundationalElementList
 * Summary
 * Description
 * @author: richardrudy
 * @package thezenmonkey\founational\Extensions  * @version:
 */


namespace thezenmonkey\foundational\Extensions;

use SilverStripe\Core\Config\Config;
use SilverStripe\Forms\FieldList;
use SilverStripe\Forms\Tab;
use SilverStripe\ORM\DataExtension;
use SilverStripe\Forms\CheckboxField;
use SilverStripe\Forms\CompositeField;
use SilverStripe\Forms\DropdownField;
use SilverStripe\Forms\NumericField;
use UncleCheese\DisplayLogic\Forms\Wrapper;

class FoundationalElementList extends DataExtension
{

    private static $db = [
        'GridDirection' => 'Varchar',
        'Full' => 'Boolean',
        'BlockGrid' => 'Boolean'

    ];

    private static $defaults = [
        'GridDirection' => 'grid-x'
    ];

    public function updateCMSFields(FieldList $fields)
    {

        parent::updateCMSFields($fields); // TODO: Change the autogenerated stub
    }

    public function updateFoundationOptions(Tab $fields) {

        $fields->removeByName('Small');
        $fields->removeByName('Medium');
        $fields->removeByName('Large');
        $fields->removeByName('XLarge');
        $fields->removeByName('XXLarge');

        $directions = Config::inst()->get('Foundational','GridDirections');


        $fields->push(DropdownField::create('GridDirection', 'Direction', $directions));
        $fields->push(CheckboxField::create('Full', 'Full Width'));

        $fields->push(CheckboxField::create('BlockGrid')
                                   ->setDescription(
                                       'All Children Form a with defined width see 
<a href="https://foundation.zurb.com/sites/docs/xy-grid.html#block-grids" target="_blank">Foundation Docs</a> 
for details'
                                   ));

        $blockGrid = CompositeField::create();

        $blockGrid->push(DropdownField::create('Small', 'At Small Screen Sizes', self::generateSizeArray('small'))->setEmptyString('Choose a Block Count'));
        $blockGrid->push(DropdownField::create('Medium', 'At Medium Screen Sizes', self::generateSizeArray('medium'))->setEmptyString('Choose a Block Count'));
        $blockGrid->push(DropdownField::create('Large', 'At Large Screen Sizes', self::generateSizeArray('large'))->setEmptyString('Choose a Block Count'));


        if(Config::inst()->get('Foundational', 'UseXlarge')) {
            $blockGrid->push(DropdownField::create('XLarge', 'At X-Large Screen Sizes', self::generateSizeArray('xlarge'))->setEmptyString('Choose a Block Count'));
        }

        if(Config::inst()->get('Foundational', 'UseXXlarge')) {
            $blockGrid->push(DropdownField::create('XXLarge', 'At XX-Large Screen Sizes', self::generateSizeArray('xxlarge'))->setEmptyString('Choose a Block Count'));
        }

        $blockGridSizes = Wrapper::create($blockGrid);

        $blockGridSizes->displayIf('BlockGrid')->isChecked();

        $fields->push( $blockGridSizes );

    }

    public function generateSizeArray($size) {

        $i = 1;

        while($i <= 8) {

            $sizeArray[$size.'-'.$i.'-up'] = $i . (($i > 1) ? ' Units' : ' Unit');
            $i++;
        }

        return $sizeArray;
    }


    public function getBlockGridClasses() {

        $style = '';
        $style .= ' ' . $this->owner->Small;
        $style .= ' ' . $this->owner->Medium;
        $style .= ' ' . $this->owner->Large;
        $style .= ' ' . $this->owner->XLarge;
        $style .= ' ' . $this->owner->XXLarge;
        return $style;
    }
}